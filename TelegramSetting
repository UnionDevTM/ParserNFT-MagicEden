import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,  # –ó–∞–º–µ–Ω—è–µ—Ç Updater
    CommandHandler,
    MessageHandler,
    filters,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º filters –≤–º–µ—Å—Ç–æ Filters
    CallbackContext,
)
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç)
def save_user_id(user_id, username):
    user_id = str(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID –≤ —Ñ–∞–π–ª–µ
    with open("Clientsbot.txt", "r") as file:
        user_ids = file.read().splitlines()
    
    if user_id not in user_ids:
        with open("Clientsbot.txt", "a") as file:
            file.write(f"{user_id}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID –≤ UsersNameID.txt
    with open("UsersNameID.txt", "r") as file:
        user_data = file.read().splitlines()
    
    user_entry = f"{username}:{user_id}"
    if user_entry not in user_data:
        with open("UsersNameID.txt", "a") as file:
            file.write(user_entry + "\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤)
def stop_user_id(user_id):
    with open("Clientsbot.txt", "r") as file:
        lines = file.readlines()
    with open("Clientsbot.txt", "w") as file:
        for line in lines:
            if line.strip() != str(user_id):
                file.write(line)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_periodic_messages(context: CallbackContext):
    with open("Clientsbot.txt", "r") as file:
        user_ids = file.readlines()
    for user_id in user_ids:
        await context.bot.send_message(chat_id=user_id.strip(), text=
                                       f"üí∞ TON üí∞ (–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ): \n"
                                       f"üí∞ UQDjhhbBbN71Ik3Was--BvqmKT8sxKnaKsMGtt0WklYuinBj \n"
                                       f"üí∞ ETH üí∞ (–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ): \n"
                                       f"üí∞ 0xAaE649A0F6333D186128424087CE43F73c9505C2 \n"
                                       f"üí∞ SOL üí∞ (–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ): \n"
                                       f"üí∞ FnxCZ1rGL7GQvmiPFMnL7AVnVFEo686t4P2ofTJ3mVcy \n"
                                       
                                       f"üì¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—Å: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!\n"
                                       )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞."
    await update.message.reply_text(
        welcome_message,
        reply_markup=ReplyKeyboardMarkup([["–ü–æ–ª—É—á–∞—Ç—å –°–∏–≥–Ω–∞–ª—ã"]], resize_keyboard=True),
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    user = update.message.from_user
    if text == "–ü–æ–ª—É—á–∞—Ç—å –°–∏–≥–Ω–∞–ª—ã":
        save_user_id(user.id, user.username)
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.",
            reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"]], resize_keyboard=True),
        )
    elif text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        stop_user_id(user.id)
        await update.message.reply_text(
            "–°–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
            reply_markup=ReplyKeyboardMarkup([["–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"]], resize_keyboard=True),
        )
    elif text == "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª":
        save_user_id(user.id, user.username)
        await update.message.reply_text(
            "–°–∏–≥–Ω–∞–ª—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
            reply_markup=ReplyKeyboardMarkup([["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª"]], resize_keyboard=True),
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token("YOUR_BOT_TOKEN_API_KEY").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    job_queue = application.job_queue
    job_queue.run_repeating(send_periodic_messages, interval=1600.0, first=0.0)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()



